user www-data;
#worker_processes 2;  # number of cpus | use "auto" in the future (nginx 1.3.8)
worker_processes auto;  # number of cpus | use "auto" in the future (nginx 1.3.8)
#worker_rlimit_nofile 150000; // buster
#worker_rlimit_nofile  worker_connections*2; // bullseye?
# pid /var/run/nginx.pid;  # FIXME old
pid /run/nginx.pid;

include /etc/nginx/modules-enabled/*.conf;

events {
	# max number of connections per worker (ulimit -n)
	#worker_connections 768;
	worker_connections 1024;
	#worker_connections 2048;
	multi_accept on;
	use epoll;
	# to make logs to record ONLY your ip (debug purposes, enable this)
	#debug_connection 2.139.181.50;
}

http {
	# SECURITY:
	# We limit the number of connections to 5 per second and allow a burst of 50 with the following nginx configuration:
	limit_req_zone  $binary_remote_addr  zone=app:10m   rate=100r/s;

	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	#Set keepalive_timeout to a sensible value like two seconds. Enable sendfile, tcp_nopush, and tcp_nodelay:
	#keepalive_timeout 65;
	keepalive_requests 100000;
	types_hash_max_size 2048;
	# server_tokens off;

	# server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	# Keeping connections open for a client which is not responding is not a good idea, its always better to close that connection and free up memory associated with it. This can be done as shown below.
	reset_timedout_connection on;

	server_tokens off;

	# optimizations
	#client_body_buffer_size 16K;
	client_body_buffer_size 128K;
	client_header_buffer_size 2k;
	large_client_header_buffers 4 8k;
	client_header_timeout 3m;
	client_body_timeout 3m;
	keepalive_timeout 3m;
	send_timeout 3m;

	# Max upload size
	client_max_body_size 32M;



	##
	# File Cache Settings
	##
	open_file_cache          max=2000  inactive=20s;
	open_file_cache_valid    30s;
	open_file_cache_min_uses 2;
	open_file_cache_errors   on;

	# SSL Session Cache
	# update: already included / managed by letsencrypt
	#ssl_session_cache    shared:SSL:10m;
	#ssl_session_timeout  10m;
	#ssl_ciphers  HIGH:!aNULL:!MD5;
	#ssl_prefer_server_ciphers on;

	# If you have cacheable PHP content, you can use the nginx FastCGI cache to cache that content. Note: this feature which improves speed is NOT RECOMMENDED due to issues like if the first page cached is from mobile, it will render mobile-looking pages to normal screens and viceversa (this depends of the templates used of course):
	#fastcgi_cache_path /var/cache/nginx/fcgi levels=1:2 keys_zone=microcache:10m max_size=1024m inactive=1h;

	server_names_hash_bucket_size 64;
	# server_name_in_redirect off;

	# list here the country's that you want to entirely block:
	#geoip_country /usr/share/GeoIP/GeoIP.dat;
	#map $geoip_country_code $allowed_country {
	#    default yes;
	#    # ireland
	#    IE no;
	#    # spain
	#    #ES no;
	#    # guyana
	#    #GY no;
	#}
	#if ($allowed_country = no) {
		#return 444;
	#}

	# list bots, we want to allow them:
	#map $http_user_agent $is_a_bot {
		#default no;
		#~*(google|bing|yandex|msnbot) yes;
		#~*(AltaVista|Googlebot|Slurp|BlackWidow|Bot|ChinaClaw|Custo|DISCo|Download|Demon|eCatch|EirGrabber|EmailSiphon|EmailWolf|SuperHTTP|Surfbot|WebWhacker) yes;
		#~*(Express|WebPictures|ExtractorPro|EyeNetIE|FlashGet|GetRight|GetWeb!|Go!Zilla|Go-Ahead-Got-It|GrabNet|Grafula|HMView|Go!Zilla|Go-Ahead-Got-It) yes;
		#~*(rafula|HMView|HTTrack|Stripper|Sucker|Indy|InterGET|Ninja|JetCar|Spider|larbin|LeechFTP|Downloader|tool|Navroad|NearSite|NetAnts|tAkeOut|WWWOFFLE) yes;
		#~*(GrabNet|NetSpider|Vampire|NetZIP|Octopus|Offline|PageGrabber|Foto|pavuk|pcBrowser|RealDownload|ReGet|SiteSnagger|SmartDownload|SuperBot|WebSpider) yes;
		#~*(Teleport|VoidEYE|Collector|WebAuto|WebCopier|WebFetch|WebGo|WebLeacher|WebReaper|WebSauger|eXtractor|Quester|WebStripper|WebZIP|Wget|Widow|Zeus) yes;
		#~*(Twengabot|htmlparser|libwww|Python|perl|urllib|scan|Curl|email|PycURL|Pyth|PyQ|WebCollector|WebCopy|webcraw) yes;
	#}

	# ignore logs of 2xx and 3xx states (for busy servers). Not tested / not working
	#map $status $loggable {
		#~^[23]  0;
		#default 1;
	#}
	#access_log off;
	#if ($loggable = 1) {
		#access_log /var/log/nginx/access.log;
	#}


	##
	# Logging Settings
	##

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	##
	# Gzip Settings
	##

	gzip on;
	gzip_static on;
	gzip_disable "MSIE [1-6].(?!.*SV1)";

	gzip_vary on;
	gzip_proxied any;
    gzip_comp_level 6;
	#gzip_comp_level 4;
	gzip_min_length 1100;
	gzip_buffers 16 8k;
	gzip_http_version 1.1;
	gzip_types
		application/atom+xml
		application/javascript
		application/json
		application/rss+xml
		application/vnd.ms-fontobject
		application/x-font-ttf
		application/x-javascript
		application/x-web-app-manifest+json
		application/xhtml+xml
		application/xml
		application/xml+rss
		font/opentype
		image/x-icon
		text/css
		text/javascript
		text/plain
		text/x-component
		text/x-js
		text/xml
		image/svg+xml;


	##
	# nginx-naxsi config
	##
	# Uncomment it if you installed nginx-naxsi
	##

	#include /etc/nginx/naxsi_core.rules;

	##
	# nginx-passenger config
	##
	# Uncomment it if you installed nginx-passenger
	##
	
	#passenger_root /usr;
	#passenger_ruby /usr/bin/ruby;

	##
	# Virtual Host Configs
	##

	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;
}


#mail {
#	# See sample authentication script at:
#	# http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript
# 
#	# auth_http localhost/auth.php;
#	# pop3_capabilities "TOP" "USER";
#	# imap_capabilities "IMAP4rev1" "UIDPLUS";
# 
#	server {
#		listen     localhost:110;
#		protocol   pop3;
#		proxy      on;
#	}
# 
#	server {
#		listen     localhost:143;
#		protocol   imap;
#		proxy      on;
#	}
#}



# vim: set syn=conf filetype=cfg noexpandtab : #
